// Generated by gencpp from file cbf_simulation/cbf_data.msg
// DO NOT EDIT!


#ifndef CBF_SIMULATION_MESSAGE_CBF_DATA_H
#define CBF_SIMULATION_MESSAGE_CBF_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cbf_simulation
{
template <class ContainerAllocator>
struct cbf_data_
{
  typedef cbf_data_<ContainerAllocator> Type;

  cbf_data_()
    : stamp()
    , px(0.0)
    , py(0.0)
    , vx(0.0)
    , vy(0.0)
    , ux_nom(0.0)
    , uy_nom(0.0)
    , ux_safe(0.0)
    , uy_safe(0.0)  {
    }
  cbf_data_(const ContainerAllocator& _alloc)
    : stamp()
    , px(0.0)
    , py(0.0)
    , vx(0.0)
    , vy(0.0)
    , ux_nom(0.0)
    , uy_nom(0.0)
    , ux_safe(0.0)
    , uy_safe(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef double _px_type;
  _px_type px;

   typedef double _py_type;
  _py_type py;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _ux_nom_type;
  _ux_nom_type ux_nom;

   typedef double _uy_nom_type;
  _uy_nom_type uy_nom;

   typedef double _ux_safe_type;
  _ux_safe_type ux_safe;

   typedef double _uy_safe_type;
  _uy_safe_type uy_safe;





  typedef boost::shared_ptr< ::cbf_simulation::cbf_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cbf_simulation::cbf_data_<ContainerAllocator> const> ConstPtr;

}; // struct cbf_data_

typedef ::cbf_simulation::cbf_data_<std::allocator<void> > cbf_data;

typedef boost::shared_ptr< ::cbf_simulation::cbf_data > cbf_dataPtr;
typedef boost::shared_ptr< ::cbf_simulation::cbf_data const> cbf_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cbf_simulation::cbf_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cbf_simulation::cbf_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cbf_simulation::cbf_data_<ContainerAllocator1> & lhs, const ::cbf_simulation::cbf_data_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.px == rhs.px &&
    lhs.py == rhs.py &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.ux_nom == rhs.ux_nom &&
    lhs.uy_nom == rhs.uy_nom &&
    lhs.ux_safe == rhs.ux_safe &&
    lhs.uy_safe == rhs.uy_safe;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cbf_simulation::cbf_data_<ContainerAllocator1> & lhs, const ::cbf_simulation::cbf_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cbf_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cbf_simulation::cbf_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cbf_simulation::cbf_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cbf_simulation::cbf_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cbf_simulation::cbf_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cbf_simulation::cbf_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cbf_simulation::cbf_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cbf_simulation::cbf_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9f6db06237f3b61c11f2d3385758187";
  }

  static const char* value(const ::cbf_simulation::cbf_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9f6db06237f3b61ULL;
  static const uint64_t static_value2 = 0xc11f2d3385758187ULL;
};

template<class ContainerAllocator>
struct DataType< ::cbf_simulation::cbf_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbf_simulation/cbf_data";
  }

  static const char* value(const ::cbf_simulation::cbf_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cbf_simulation::cbf_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float64 px\n"
"float64 py\n"
"float64 vx\n"
"float64 vy\n"
"float64 ux_nom\n"
"float64 uy_nom\n"
"float64 ux_safe\n"
"float64 uy_safe\n"
;
  }

  static const char* value(const ::cbf_simulation::cbf_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cbf_simulation::cbf_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.px);
      stream.next(m.py);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.ux_nom);
      stream.next(m.uy_nom);
      stream.next(m.ux_safe);
      stream.next(m.uy_safe);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cbf_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cbf_simulation::cbf_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cbf_simulation::cbf_data_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "px: ";
    Printer<double>::stream(s, indent + "  ", v.px);
    s << indent << "py: ";
    Printer<double>::stream(s, indent + "  ", v.py);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "ux_nom: ";
    Printer<double>::stream(s, indent + "  ", v.ux_nom);
    s << indent << "uy_nom: ";
    Printer<double>::stream(s, indent + "  ", v.uy_nom);
    s << indent << "ux_safe: ";
    Printer<double>::stream(s, indent + "  ", v.ux_safe);
    s << indent << "uy_safe: ";
    Printer<double>::stream(s, indent + "  ", v.uy_safe);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CBF_SIMULATION_MESSAGE_CBF_DATA_H
